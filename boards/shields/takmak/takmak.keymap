/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

// https://github.com/urob/zmk-config
// #include "../zmk-nodefree-config/helper.h"

// RC(0)  RC(1)  RC(2)  RC(3)  RC(4)  RC(5)  RC(6)      RC(7)  RC(8)  RC(9)  RC(10) RC(11) RC(12) RC(13) RC(14)
// RC(15) RC(16) RC(17) RC(18) RC(19) RC(20) RC(21)     RC(22) RC(23) RC(24) RC(25) RC(26) RC(27) RC(28) RC(29)
// RC(30) RC(31) RC(32) RC(33) RC(34) RC(35) RC(36)     RC(37) RC(38) RC(39) RC(40) RC(41) RC(42) RC(43) RC(44)
// RC(45) RC(46) RC(47) RC(48) RC(49) RC(50) RC(51)     RC(52) RC(53) RC(54) RC(55) RC(56) RC(57) RC(58) RC(59)
// RC(60) RC(61) RC(62) RC(63) RC(64)        RC(65)     RC(66)        RC(67) RC(68) RC(69) RC(70) RC(71) RC(72)

#define KEYS_L 0 1 2 3 4 5 6 15 16 17 18 19 20 21 30 31 32 33 34 35 36 45 46 47 48 49 50 51  // left-hand keys
#define KEYS_R 7 8 9 10 11 12 13 14 22 23 24 25 26 27 28 29 37 38 39 40 41 42 43 44 52 53 54 55 56 57 58 59  // right-hand keys
#define THUMBS 45 60 61 62 63 66 67 68 69 70 58 59 // thumb keys

/* left-hand HRMs */
// ZMK_BEHAVIOR(hml, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <200>;
//     quick-tap-ms = <175>;                // repeat on tap-into-hold
//     global-quick-tap;
//     bindings = <&kp>, <&kp>;
//     hold-trigger-key-positions = <KEYS_R THUMBS>;
// )

/* right-hand HRMs */
// ZMK_BEHAVIOR(hmr, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <200>;
//     quick-tap-ms = <175>;                // repeat on tap-into-hold
//     global-quick-tap;
//     bindings = <&kp>, <&kp>;
//     hold-trigger-key-positions = <KEYS_L THUMBS>;
// )

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define GAMING  3

#define ZOOMA LC(LA(LS(LG(A))))
#define ZOOMV LC(LA(LS(LG(V))))
#define COMBO LA(LS(LGUI))

/ {
    behaviors {
        rgb_encoder: left_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            // bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
            bindings = <&kp K_VOL_UP>, <&kp K_VOL_DN>;
        };

        vol_encoder: right_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp K_VOL_UP>, <&kp K_VOL_DN>;
        };

        hml: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = < 2>;
            flavor = "balanced";
            tapping-term-ms = <200>; // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
        };

        hmr: right_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = < 2>;
            flavor = "balanced";
            tapping-term-ms = <200>; // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";

            sensor-bindings = <&rgb_encoder &vol_encoder>;

            bindings = <  
&kp GRAVE     &kp N1          &kp N2      &kp N3       &kp N4            &kp N5    &none                     &tog LOWER       &kp N6   &kp N7          &kp N8      &kp N9     &kp N0             &kp MINUS    &kp EQUAL
&kp TAB       &kp Q           &kp W       &kp E        &kp R             &kp T     &none                     &none            &kp Y    &kp U           &kp I       &kp O      &kp P              &kp LBKT     &kp RBKT
&kp ESC       &hml LSHIFT A   &kp S       &kp D        &hml LGUI F       &kp G     &none                     &kp BSPC         &kp H    &hmr RGUI J     &kp K       &kp L      &hmr RSHIFT SEMI   &kp SQT      &kp BSLH
&kp LSHFT     &kp Z           &kp X       &kp C        &kp V             &kp B     &lt LGUI SPACE            &kp K_MUTE       &kp N    &kp M           &kp COMMA   &kp DOT    &kp FSLH           &kp RSHIFT   &kp RSHIFT
&tog GAMING   &kp LCTRL       &kp LALT    &kp LGUI     &lt LOWER SPACE             &none                     &lt RGUI RET              &lt RAISE RET   &kp RGUI    &kp LEFT   &kp DOWN           &kp UP       &kp RIGHT
>; // Do I really need to &lt here?
        };

        lower_layer {
            display-name = "Lower";

            bindings = <
&none  &kp F1   &kp F2            &kp F3              &kp F4       &kp F5        &none                &trans   &kp F6     &kp F7   &kp F8   &kp F9    &kp F10   &kp F11   &kp F11
&none  &none    &none             &ext_power EP_TOG   &sys_reset   &none         &none                &none   &none      &kp N7   &kp N8   &kp N9    &none     &none    &none
&none  &none    &studio_unlock    &none               &none        &none         &none                &none   &kp BSPC   &kp N4   &kp N5   &kp N6    &none     &none    &none
&none  &none    &none             &none               &none        &bootloader   &none                &none   &none      &kp N1   &kp N2   &kp N3    &none     &none    &none
&none  &none    &none             &none               &none                      &none                &none              &kp N0   &none    &none     &none     &none    &bootloader
>;
        };

        raise_layer {
            display-name = "Raise";
            
            bindings = <
&bt BT_CLR_ALL    &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3    &bt BT_SEL 4   &none          &trans       &trans       &trans       &trans    &trans         &kp K_MUTE    &kp C_VOL_DN &kp C_VOL_UP
&trans            &trans        &trans       &trans       &trans          &trans         &none          &sys_reset   &trans       &trans       &kp UP    &trans         &trans        &trans       &trans
&trans            &trans        &trans       &trans       &trans          &trans         &trans         &trans       &kp BSPC     &kp LEFT     &kp DOWN  &kp RIGHT      &trans        &trans       &trans
&trans            &trans        &trans       &trans       &trans          &trans         &trans         &trans       &trans       &trans       &trans    &trans         &trans        &trans        &trans
&trans            &trans        &trans       &trans       &trans                         &trans         &trans                    &trans       &trans    &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR_ALL
>;
        };

        gaming_layer {
            display-name = "Gaming";

            bindings = <
&kp GRAVE     &kp N1      &kp N2     &kp N3     &kp N4            &kp N5   &none                &tog LOWER     &kp N6   &kp N7          &kp N8      &kp N9     &kp N0     &kp MINUS    &kp EQUAL
&kp TAB       &kp Q       &kp W      &kp E      &kp R             &kp T    &none                &none          &kp Y    &kp U           &kp I       &kp O      &kp P      &kp LBKT     &kp RBKT
&kp ESC       &kp A       &kp S      &kp D      &kp F             &kp G    &none                &kp BSPC       &kp H    &kp J           &kp K       &kp L      &kp SEMI   &kp SQT      &kp BSLH
&kp LSHFT     &kp Z       &kp X      &kp C      &kp V             &kp B    &kp SPACE            &kp RET   &kp N    &kp M           &kp COMMA   &kp DOT    &kp FSLH   &kp RSHIFT   &kp RSHIFT
&tog GAMING   &kp LCTRL   &kp LALT   &kp LGUI   &lt LOWER SPACE            &trans               &trans                  &lt RAISE RET   &kp RGUI    &kp LEFT   &kp DOWN   &kp UP       &kp RIGHT
>;
        };

        extra_layer {
            display-name = "Extra";
            
            bindings = <
&trans  &trans  &trans  &trans  &trans   &trans   &none          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans 
&trans  &trans  &trans  &trans  &trans   &trans   &none          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans 
&trans  &trans  &trans  &trans  &trans   &trans   &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &trans   &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans         &trans          &trans  &trans  &trans  &trans  &trans  &trans
>;
        };
    };
};
